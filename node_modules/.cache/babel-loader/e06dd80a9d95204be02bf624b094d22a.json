{"ast":null,"code":"// add, remove cell\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window.Flickity, window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity, utils) {\n  // append cells to a document fragment\n  function getCellsFragment(cells) {\n    var fragment = document.createDocumentFragment();\n    cells.forEach(function (cell) {\n      return fragment.appendChild(cell.element);\n    });\n    return fragment;\n  } // -------------------------- add/remove cell prototype -------------------------- //\n\n\n  var proto = Flickity.prototype;\n  /**\n   * Insert, prepend, or append cells\n   * @param {[Element, Array, NodeList]} elems - Elements to insert\n   * @param {Integer} index - Zero-based number to insert\n   */\n\n  proto.insert = function (elems, index) {\n    var cells = this._makeCells(elems);\n\n    if (!cells || !cells.length) return;\n    var len = this.cells.length; // default to append\n\n    index = index === undefined ? len : index; // add cells with document fragment\n\n    var fragment = getCellsFragment(cells); // append to slider\n\n    var isAppend = index === len;\n\n    if (isAppend) {\n      this.slider.appendChild(fragment);\n    } else {\n      var insertCellElement = this.cells[index].element;\n      this.slider.insertBefore(fragment, insertCellElement);\n    } // add to this.cells\n\n\n    if (index === 0) {\n      // prepend, add to start\n      this.cells = cells.concat(this.cells);\n    } else if (isAppend) {\n      // append, add to end\n      this.cells = this.cells.concat(cells);\n    } else {\n      // insert in this.cells\n      var endCells = this.cells.splice(index, len - index);\n      this.cells = this.cells.concat(cells).concat(endCells);\n    }\n\n    this._sizeCells(cells);\n\n    this.cellChange(index);\n    this.positionSliderAtSelected();\n  };\n\n  proto.append = function (elems) {\n    this.insert(elems, this.cells.length);\n  };\n\n  proto.prepend = function (elems) {\n    this.insert(elems, 0);\n  };\n  /**\n   * Remove cells\n   * @param {[Element, Array, NodeList]} elems - ELements to remove\n   */\n\n\n  proto.remove = function (elems) {\n    var _this = this;\n\n    var cells = this.getCells(elems);\n    if (!cells || !cells.length) return;\n    var minCellIndex = this.cells.length - 1; // remove cells from collection & DOM\n\n    cells.forEach(function (cell) {\n      cell.remove();\n\n      var index = _this.cells.indexOf(cell);\n\n      minCellIndex = Math.min(index, minCellIndex);\n      utils.removeFrom(_this.cells, cell);\n    });\n    this.cellChange(minCellIndex);\n    this.positionSliderAtSelected();\n  };\n  /**\n   * logic to be run after a cell's size changes\n   * @param {Element} elem - cell's element\n   */\n\n\n  proto.cellSizeChange = function (elem) {\n    var cell = this.getCell(elem);\n    if (!cell) return;\n    cell.getSize();\n    var index = this.cells.indexOf(cell);\n    this.cellChange(index); // do not position slider after lazy load\n  };\n  /**\n   * logic any time a cell is changed: added, removed, or size changed\n   * @param {Integer} changedCellIndex - index of the changed cell, optional\n   */\n\n\n  proto.cellChange = function (changedCellIndex) {\n    var prevSelectedElem = this.selectedElement;\n\n    this._positionCells(changedCellIndex);\n\n    this._updateWrapShiftCells();\n\n    this.setGallerySize(); // update selectedIndex, try to maintain position & select previous selected element\n\n    var cell = this.getCell(prevSelectedElem);\n    if (cell) this.selectedIndex = this.getCellSlideIndex(cell);\n    this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex);\n    this.emitEvent('cellChange', [changedCellIndex]); // position slider\n\n    this.select(this.selectedIndex);\n  }; // -----  ----- //\n\n\n  return Flickity;\n});","map":{"version":3,"names":["window","factory","module","exports","require","Flickity","fizzyUIUtils","utils","getCellsFragment","cells","fragment","document","createDocumentFragment","forEach","cell","appendChild","element","proto","prototype","insert","elems","index","_makeCells","length","len","undefined","isAppend","slider","insertCellElement","insertBefore","concat","endCells","splice","_sizeCells","cellChange","positionSliderAtSelected","append","prepend","remove","getCells","minCellIndex","indexOf","Math","min","removeFrom","cellSizeChange","elem","getCell","getSize","changedCellIndex","prevSelectedElem","selectedElement","_positionCells","_updateWrapShiftCells","setGallerySize","selectedIndex","getCellSlideIndex","slides","emitEvent","select"],"sources":["/Users/mac/Desktop/Darasimi files/Online-Mini-Store-REST-API-x-Reactjs-/frontend/node_modules/flickity/js/add-remove-cell.js"],"sourcesContent":["// add, remove cell\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n        require('./core'),\n        require('fizzy-ui-utils'),\n    );\n  } else {\n    // browser global\n    factory(\n        window.Flickity,\n        window.fizzyUIUtils,\n    );\n  }\n\n}( typeof window != 'undefined' ? window : this, function factory( Flickity, utils ) {\n\n// append cells to a document fragment\nfunction getCellsFragment( cells ) {\n  let fragment = document.createDocumentFragment();\n  cells.forEach( ( cell ) => fragment.appendChild( cell.element ) );\n  return fragment;\n}\n\n// -------------------------- add/remove cell prototype -------------------------- //\n\nlet proto = Flickity.prototype;\n\n/**\n * Insert, prepend, or append cells\n * @param {[Element, Array, NodeList]} elems - Elements to insert\n * @param {Integer} index - Zero-based number to insert\n */\nproto.insert = function( elems, index ) {\n  let cells = this._makeCells( elems );\n  if ( !cells || !cells.length ) return;\n\n  let len = this.cells.length;\n  // default to append\n  index = index === undefined ? len : index;\n  // add cells with document fragment\n  let fragment = getCellsFragment( cells );\n  // append to slider\n  let isAppend = index === len;\n  if ( isAppend ) {\n    this.slider.appendChild( fragment );\n  } else {\n    let insertCellElement = this.cells[ index ].element;\n    this.slider.insertBefore( fragment, insertCellElement );\n  }\n  // add to this.cells\n  if ( index === 0 ) {\n    // prepend, add to start\n    this.cells = cells.concat( this.cells );\n  } else if ( isAppend ) {\n    // append, add to end\n    this.cells = this.cells.concat( cells );\n  } else {\n    // insert in this.cells\n    let endCells = this.cells.splice( index, len - index );\n    this.cells = this.cells.concat( cells ).concat( endCells );\n  }\n\n  this._sizeCells( cells );\n  this.cellChange( index );\n  this.positionSliderAtSelected();\n};\n\nproto.append = function( elems ) {\n  this.insert( elems, this.cells.length );\n};\n\nproto.prepend = function( elems ) {\n  this.insert( elems, 0 );\n};\n\n/**\n * Remove cells\n * @param {[Element, Array, NodeList]} elems - ELements to remove\n */\nproto.remove = function( elems ) {\n  let cells = this.getCells( elems );\n  if ( !cells || !cells.length ) return;\n\n  let minCellIndex = this.cells.length - 1;\n  // remove cells from collection & DOM\n  cells.forEach( ( cell ) => {\n    cell.remove();\n    let index = this.cells.indexOf( cell );\n    minCellIndex = Math.min( index, minCellIndex );\n    utils.removeFrom( this.cells, cell );\n  } );\n\n  this.cellChange( minCellIndex );\n  this.positionSliderAtSelected();\n};\n\n/**\n * logic to be run after a cell's size changes\n * @param {Element} elem - cell's element\n */\nproto.cellSizeChange = function( elem ) {\n  let cell = this.getCell( elem );\n  if ( !cell ) return;\n\n  cell.getSize();\n\n  let index = this.cells.indexOf( cell );\n  this.cellChange( index );\n  // do not position slider after lazy load\n};\n\n/**\n * logic any time a cell is changed: added, removed, or size changed\n * @param {Integer} changedCellIndex - index of the changed cell, optional\n */\nproto.cellChange = function( changedCellIndex ) {\n  let prevSelectedElem = this.selectedElement;\n  this._positionCells( changedCellIndex );\n  this._updateWrapShiftCells();\n  this.setGallerySize();\n  // update selectedIndex, try to maintain position & select previous selected element\n  let cell = this.getCell( prevSelectedElem );\n  if ( cell ) this.selectedIndex = this.getCellSlideIndex( cell );\n  this.selectedIndex = Math.min( this.slides.length - 1, this.selectedIndex );\n\n  this.emitEvent( 'cellChange', [ changedCellIndex ] );\n  // position slider\n  this.select( this.selectedIndex );\n};\n\n// -----  ----- //\n\nreturn Flickity;\n\n} ) );\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}